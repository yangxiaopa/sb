clear all
load node.out
plot(node(4:end,1)-3,node(4:end,2))
hold on
plot(node(4:end,1)-3,(node(4:end,8)-node(4:end,2)),'r')
plot(node(4:end,1)-3,(node(4:end,14)-node(4:end,8)),'g')
legend('first interstory drift [m]','second interstory drift [m]','third interstory drift [m]')

x=0:pi/100:2*pi;
y=sin(x);
plot(x,y,'r--')
xlabel('x') 
ylabel('sin(x)') 
title('Plot of the Sine Function')
hold on
y2=cos(x);
plot(x,y2,'b:')
legend('sin','cos')
hold off

[a,b]=meshgrid(-2:0.2:2);
c=a.*exp(-a.^2 - b.^2);
surf(a,b,c)

t=0:pi/100:2*pi;
[x,y,z]=cylinder(4*cos(t));
subplot(2,2,1); mesh(x); title('x');
subplot(2,2,2); mesh(y); title('y');
subplot(2,2,3); mesh(z); title('z');
subplot(2,2,4); mesh(x,y,z); title('x,y,z');

hold on 当前轴及图像保持而不被刷新,准备接受此后绘制的图形，多图共存,启动图形保持功能,当前坐标和图形都将保持,从此绘制的图形都将添加在
这个图形的基础上,并自动调整坐标轴的范围.
hold off 使当前轴及图形不再具备被刷新的性质,新图出现时,取消原图.即关闭图保持功能.
默认情况下,matlab每次使用plot函数进行图形绘制，将重新产生一个图形窗口,若希望后续图形能和前面所绘图形进行比较,可用hold on(/off)将新
产生的图形曲线叠加到已有图形上;二是采用subplot(m,n,k)将图形窗口分隔为n*m个子图,并选择第k个子图作为当前图形.
---------------
feval函数的用法
[y1,...,yN] = feval(fun,x1,...,xM) #fun为需使用的函数或句柄，x为函数的参数，y为函数的返回值
fun采用函数function handle与function name函数名时的调用格式为： [a1,a2] = feval(@swap, 1,2)   [a1,a2] = feval('swap',a1,a2)
-------------------------------------------------------------------------------------------------------------------------
rep()函数用法
MatOut = rep(MatIn,REPN);
MatIn = [1 2 3]
               REPN = [1 2]: MatOut = [1 2 3 1 2 3]
               REPN = [2 1]: MatOut = [1 2 3;
                                       1 2 3]
               REPN = [3 2]: MatOut = [1 2 3 1 2 3;
                                       1 2 3 1 2 3;
                                       1 2 3 1 2 3]
-------------------------------------------------------
size()函数
size()函数返回矩阵的大小，即矩阵的行数、列数、面数等等.若矩阵x为3x4x5三维矩阵时
[m]=size(x); 返回值m为一个一行三列的矩阵m=3 4 5
[m n]=size(x);返回m=3,n=20，即参数的个数多余一个小于矩阵的维数时最后一个参数的返回值是其余返回值的乘积
[m n l]=size(x);返回m=3,n=4,l=5 完整的读取返回值
[m n l p]=size(x);返回m=3,n=4,l=5 p=1 即参数的个数多余矩阵维数时，多余参数的返回值都是1
若只读取某一维矩阵的大小,如第二维，可采用n=size(x,1); 返回数组x的行数n=3/// n=size(x,2);返回数组x的列数n=4   
------------------------------------------------------------------------------------------------------

+ - * / \ ^ ' ()   矩阵运算符
+ - .* ./ .\ .^ .' 阵列运算符（元素与元素件运算）

常见的数据精确度类型
char---带符号的字符8bits
short---短整数16bits
long---长整数16bits
float---单精度浮点数32bits
double---双精度浮点数32bits

格式转换符
%c---读取字符型变量   %s---读取字符串变量   %d---读取整数型变量

inf---infinity  NaN---not a number 

-----------------------------------matlab对数据文件的操作---------------------------------
1.文件每一行的数据项数是相同的(数据为矩形形状)，每个数据项由一个或多个空格分隔开，内容恰好构成一个矩阵
clear all；删除工作区的所有变量
A=load('nod_rea_result\totalnode.out')
A=load('node1.out') >>> 将文件导入工作空间并赋给变量A

2.若文件的数据内容由逗号分隔开，把该文件的内容全部读入阵列A >>>  A=dlmread('node1.out',',')

3.处理一个包含文本头的的数据文件，可使用textread函数，并指定头行参数，textread可处理有固定格式的文件，也可处理无格式文件，还可对文件中每行数据按列读
num1    num2    num3    num4
0.3242  0.4324  0.3455  0.6754
0.4566  0.9368  0.9892  0.9274
0.4658  0.2832  0.9373  0.8233
[num1,num2,num3,num4]=textread('testFile.txt','%f%f%f%f','headerlines',1)

textread读取字母数字混合的数据
Joe    gradeA  4.9  pass
susan  gradeD  2.0  fail
[name,gra,grades,answer] = textread('testFile.txt','%s%s%f%s')
可选择的读取数据，如读取第一列和最后一列，可使用命令：
[name,answer] = textread('testFile.txt','%s%*s%*f%s')

textread处理文件分隔符为非空格的文件，textread函数将该分隔符作为其参数，比如文件中分隔符为分号，可使用如下命令：
[name,gra,grades,answer] = textread('testFile.txt','%s%s%f%s','delimiter',';')

4.使用导入函数读取二进制文件
函数名称 读取文件的扩展名 数据格式
load .mat	aviread .avi	cdfread .cdf	hdf .hdf	waveread .wav	xlsread .xls
5.二进制数据的存写
函数名称 读取文件的扩展名 数据格式
save .mat	avifile .avi	cdfwriter .cdf	 hdf .hdf	wavewrite.wav	xlswrite .xls



ans（answer）是matlab中默认的结果变量，每次结果运算后都将存储在指定变量中，只输入表达式却不指定变量，matlab自动将结果存储在ans变量中。
如果用分号“；”结束语句, matlab 将执行计算, 但阻止在命令窗口中显示输出。
转置矩阵A,将行与列对换命令为A'
矩阵A的逆，inv（A)
.* .^ 为矩阵内部元素的乘法和幂次方
水平串联矩阵a用逗号，可表示为b=[a,a]
垂直串联矩阵a用分号，可表示为b=[a;a]

矩阵元素的操作
   16 2  3  13
A= 5  11 10 8
   9  7  6  12
   4  14 15 1
A（4，2）ans=14 定位矩阵A 的4行12列元素
A（1:3,2) ans=2 输出矩阵A1到3行的第二列
	      11	
              7
A（3，：）ans=9 7 6 12 输出矩阵A的三行所有列

B=0：10：100 ans=0 10 20 30 40 50 60 70 80 90 100  star : step : end  若省略中间部，此时默认为1

zeros all zeros
ones  all ones 
rand  uniformly distributed random elements
rands normally distributed random elements

z=zeros(2,4) z=0 0 0 0
               0 0 0 0 
f=5*ones(3,3)
f=5 5 5
  5 5 5 
  5 5 5
n=(0:9)'  pows=[n n.^2 2.^n]  
n= 0     pows=   0   0   1
   1             1   1   2
   2             2   4   4
   3             3   9   8
   4             4   16  16
   5             5   25  32
   6             6   36  64
   7             7   49  128
   8             8   64  81
   9             9   81  512

x=A;
x(:,2)=[] >>> 使矩阵A第二列为空

X(1:2,2:3) = 0 >>> 使矩阵相应位置上的这4个元素为0





	      
help funname   在命令窗口打开帮助文档
doc funname    在帮助浏览器打开帮助文档
lookfor funname 搜索某关键字相关函数

1.MATLAB中计算程序运行时间的代码
tic
%代码块
toc
dispdisp(['运行时间：',num2str(toc)])

2.创建保存输出文件的目录
mkdir(Make Directory创建目录)创建目录时应保证新建的目录没有重名
mkdir('F:\zzzzzzzzzzzzz\matlab_and_opensees_test\output22') %创建文件夹
if { [file exists output] == 0 } {
	  file mkdir output;
}  
# 如果文件夹output不存在，创建一个output文件夹。

3.  which co.tcl 
 显示当前co.tcl工作目录

exist
用于判断目录或者文件是否存在

对文件的操作
f=fullfile('D:','MATLAB','example.txt'); %得到打开文件的信息     ***
fid=fopen(f);        %打开文件，fid=-1表示打开文件失败；fid=1表示输出；fid=2表示错误信息文件 fid=其他正数表示文件打开成功，并返回文件编号
d =fscanf(fid,'%c');  fid=fopen(f,'r')以读的方式打开文件，打开方式有：r, w, a, r+, w+, a+, A, W
fclose(fid); %关闭文件，关闭多个文件有fclose('all')

load
可用于读取数值文件，并且无需打开文件，但要求文件中所有行的列数相同  ***
f=fullfile('D:','MATLAB','example.txt');
A=load（f);%返回以f为路径的文件的内容

fread
读取文件中的内容，需和fopen,fclose配合使用，返回的是ASCII码，可以指定返回字节数和返回的格式。
f=fullfile('D:','Matlab','example.txt'); 
fid = fopen(f, 'r'); 
a=fread(fid); %读取文件全部内容，fread函数返回的是每个字节的ASCII码赋给变量a

fscanf
用于读取文件中指定格式的内容，需和需和fopen,fclose配合使用，可指定读取的字节数，返回内容存放在一个一维数组中
f=fullfile('D:','Matlab','example.txt');
fid = fopen(f, 'r');
a=fscanf(fid,'%d'); %读取文件中的所有数字，返回到数组a中         ***
[a,count]=fscanf(fid,'%d',5); %读取文件中fid指向位置开始后面的5个数字，返回到数组a中，count返回a的大小，count<=5(返回的数字个数可能小于要求
fclose(fid);                   读取的个数)

fgetl
用于读取文件中的一行内容，不包括换行符，需和fopen,fclose配合使用，
f=fullfile('D:','Matlab','example.txt');
fid = fopen(f, 'r');
tline=fgetl(fid); %从文件中读取fid指向的一行内容

fprintf
用于将指定格式数据写入到文件中，需和fopen,fclose配合使用
y = [x; exp(x)];
f=fullfile('D:','Matlab','example.txt');
fid = fopen(f,'w');
fprintf(fid,'%6.2f.8f\n',y);将矩阵y写入文件中

feof
用于判断是否为文件末尾，需和fopen,fclose配合使用
f=fullfile('D:','Matlab','example.txt');
fid = fopen(f, 'r');

%3d  >>>按照长度为三的整型输出 比如10 为”_10" 
%6.2f >>>输出总长度为6，小数后保留2位 比如3.14159 为 “_ _ _3.14"
%s 或 %c >>>输出字符串
Supported conversion specifications:
         %n - read a number - float or integer (returns double array)
              %5n reads up to 5 digits or until next delimiter
         %d - read a signed integer value (returns double array)
              %5d reads up to 5 digits or until next delimiter
         %u - read an integer value (returns double array)
              %5u reads up to 5 digits or until next delimiter
         %f - read a floating point value (returns double array)
              %5f reads up to 5 digits or until next delimiter
         %s - read a whitespace separated string (returns cellstr)
              %5s reads up to 5 characters or until whitespace
         %q - read a double-quoted string, ignoring the quotes (returns cellstr)
              %5q reads up to 5 non-quote characters or until whitespace
         %c - read character or whitespace (returns char array)
              %5c reads up to 5 characters including whitespace


------------------------------------------MATLAB遗传算法--------http://codem.group.shef.ac.uk/index.php/ga-toolbox
matlab的三种遗传算法工具箱：
1：gaot工具箱，非matlab软件自带的工具箱，任然可以自己配置使用。飞思科技的《matlab6.x辅助优化计算与设计》第五章对遗传算法使用有介绍
2：gatbx工具箱，由英国设菲尔德sheffield大学开发的gatbas工具箱，非matlab软件自带工具箱。雷杰英《matlab遗传算法工具箱及应用》有详细使用说明
3：gads工具箱，matlab自带的工具箱，可查看雷杰英《matlab遗传算法工具箱及应用》进一步了解

遗传算法工具箱的安装步骤：1.解压gatbx.rar文件至matlab目录下的toolbox的文件夹 2.运行matlab，在设置路径里添加gatbx工具箱
（***注意，当用matlab来编写遗传算法代码时，根据自己所安装的工具箱来编写代码。

遗传算法（genetic algorithm 缩写为GA)：可有效解决最优化问题的方法，遗传算法是模拟达尔文的遗传选择和自然淘汰的生物进化过程的计算模型，借鉴生物遗传
现象使具有一定数量的候选解的种群向更好的解进化，使适应度函数代入估计参数后达到最值来得到最优解，遗传算法先随机产生一组初始解，作为初始种群，以数值解
为例，这些解通过二进制代码存储在计算机中，类似于染色体，可进行生物上的交叉、变异、遗传等。每一代通过适应度函数来淘汰劣性个体，后代由前一代保留下的染色体
通过“交叉”或“变异”形成，在新一代的形成过程中总是根据适应度值来保留个体，从而保持种群大小为常数。适应度值高的染色体被选中概率较高，遗传若干代后算法收敛
于最好的染色体或达到预先设定的遗传代数，则停止计算，返回最优解
  
将问题域中的可能解看作群体的个体或染色体，并将每一个个体编码成符号串形式，模拟达尔文的遗传选择和自然淘汰的生物进化过程，对群体反复进行遗传学的遗传、交叉
和变异（变异具有阻止局部最优收敛的作用）操作，根据目标适应度函数对每个个体进行评价并依据优胜劣汰的规则不断得到更优的的群体，同时以并行搜索方式来搜索优化群体得到全局最优解。
-------*******-----------**********--------------**********---------********------
wright声称使用实值基因的遗传算法在数值函数优化上与二进制编码相比有许多优点，，在函数计算前，不需要从染色体到表现值的转换，可提高遗传算法的效率；计算机
内部的高效浮点表示可直接使用。减少内存的需求，相对于离散的二进制或其他值，没有精度损失，对使用不同的遗传算子非常自由。michalewicz在
《进化策略（evolution strategies》中描述使用实值编码的细节
----------------------------------------------------------


遗传算法中的通用函数：
bs2rv（binary string to real vector):二进制串到实值的转换  
Chrom=crtbp(4,8)  %创建任意染色体，如为二进制串
Chrom =

     1     1     1     1     0     1     1     1
     1     0     1     0     1     0     1     0
     0     0     0     1     1     1     1     1
     1     1     1     0     1     1     0     0
FieldD=[8;-1;10;1;0;1;1]   %译码矩阵将二进制串矩阵Chrom转换为实值向量
FieldD =

     8
    -1
    10
     1
     0
     1
     1
Phen=bs2rv(Chrom,FieldD)  %转换二进制到实值
Phen =

    6.1176
    7.8000
   -0.0941
    6.8941
-------------------
BaseV=crtbase([4 6],[8 5])  %创建基向量

BaseV =

     8     8     8     8     5     5     5     5     5     5
crtbase产生向量的元素对应染色体结构的基因座，使用不同的基因字符表示建立种群时该函数可与函数crtbp联合使用
BaseV=crtbase([4 5],[8 4])

BaseV =

     8     8     8     8     4     4     4     4     4
[Chrom,Lind,BaseV]=crtbp(6,BaseV)

Chrom =

     1     7     2     0     0     2     2     3     1
     0     7     0     1     1     2     0     0     1
     1     3     6     7     3     2     2     3     2
     1     3     3     7     0     1     0     3     2
     3     2     1     4     0     2     1     1     3
     0     7     3     0     0     1     2     1     3


Lind =

     9


BaseV =

     8     8     8     8     4     4     4     4     4
-------------------------------------------------------
crtrp  %创建实值原始种群
--------------------------
migrate  %在子种群间迁移个体
[Chrom, ObjV] = migrate(Chrom, SUBPOP, MigOpt, ObjV)  %migrate完成在当前种群Chrom的子种群间迁移个体，并返回迁移后的种群Chrom.Chrom的一行对应一个个体，子种群数量由SUBPOP指定
[Chrom, ObjV] = migrate(Chrom, SUBPOP, [0.3 1 2], ObjV)
在一子种群中选择30%的个体并用从单向环状结构的临近子种群中选择最适应（较小的ObjV）的个体替换
--------------------------
mut %离散变异算子
NewChrom = mut(OldChrom,Pm,BaseV)  %使用第三个变量指明染色体个体元素的变异的基本字符，染色体结构的长度Lind=length(BaseV)
BaseV=[8 8 8 4 4 4 4 4]

BaseV =

     8     8     8     4     4     4     4     4
[Chrom, Lind, BaseV]=crtbp(6,BaseV)

Chrom =

     5     7     3     0     3     2     1     3
     3     4     1     1     3     1     1     0
     6     4     6     1     1     2     1     3
     4     4     1     3     0     2     2     2
     2     1     1     1     1     0     0     1
     7     2     1     0     1     0     1     2


Lind =

     8


BaseV =

     8     8     8     4     4     4     4     4
NewChrom = mut(Chrom, 0.0778, BaseV)

NewChrom =

     5     7     1     0     3     2     1     3
     3     4     1     1     3     1     1     0
     6     4     6     1     1     0     1     3
     4     4     1     3     0     2     2     1
     2     1     1     1     1     0     0     1
     7     2     1     0     1     0     1     2
     
--------------------------
mutate   %个体的变异（高级函数）
NewChrom = mutate(MUT_F, OldChrom, FieldDR, MutOpt, SUBPOP) 
对于二进制种群,选取MUT_F='mut'  对于十进制种群，选取MUT_F='mutbga'
Chrom=crtbp(6,BaseV)

Chrom =

     2     2     1     3     0     1     1     2
     3     5     1     2     3     0     1     1
     4     5     7     0     2     2     2     2
     7     4     1     1     1     0     1     0
     3     5     0     1     0     1     3     3
     7     5     4     3     1     2     3     3
     
FieldDR=[0 0 0 0 0 0 0 0; 8 8 8 4 4 4 4 4]

FieldDR =

     0     0     0     0     0     0     0     0
     8     8     8     4     4     4     4     4     
NewChrom = mutate('mutbga', Chrom, FieldDR)

NewChrom =

    2.0000    2.0000    1.0000    3.0000         0    1.0000    1.0000    2.0000
    3.0000    5.0000    1.0000    2.0000    3.0000         0    1.0000    1.0000
    4.0000    5.0000    7.0000         0    1.9961    2.0000    2.0000    2.0000
    7.0000    4.0000    1.0000    1.0000    1.0000         0    1.0000         0
    3.0000    5.0000         0    1.0000         0    1.0000    3.0000    3.0000
    7.0000    5.0000    4.0000    3.0000    1.0000    2.0000    3.0000    3.0000
---------------------------------
mutbga	%实值种群的变异 （遗传算法育种器的变异算子）
NewChrom = mutbga(OldChrom, FieldDR, MutOpt)  mutbga对实值种群OldChrom，使用给定的概率，变异每一个变量，返回变异后的种群NewChrom
--------------------------------
ranking	%基于秩的适应度计算
FitnV = ranking(ObjV, RFun, SUBPOP)	%ranking按照个体的目标值ObjV由小到大的顺序对他们进行排序，并返回一包含对应个体适应度值FitnV的列向量，如果ranking被调用于多子种群，
则ranking独立的每个子种群执行，
ObjV = [1 2 3 4 5 10 9 8 7 6]'

ObjV =

     1
     2
     3
     4
     5
    10
     9
     8
     7
     6
FitnV = ranking(ObjV)

FitnV =

    2.0000
    1.7778
    1.5556
    1.3333
    1.1111
         0
    0.2222
    0.4444
    0.6667
    0.8889
----------------------------    
recdis	%离散重组
NewChrom = recdis(OldChrom, XOVR)	%recdis完成当前种群OldChrom中一对个体的离散重组，在交配后返回新的种群NewChrom.recdis为低级重组函数，通常被recombin调用
OldChrom = [40.23 -17.17 28.95 15.38; 82.06 13.26 13.35 -9.09; 52.43 25.64 15.20 -2.54; -47.50 49.10 9.09 10.65; -90.50 -13.46 -25.63 -0.89]

OldChrom =

   40.2300  -17.1700   28.9500   15.3800
   82.0600   13.2600   13.3500   -9.0900
   52.4300   25.6400   15.2000   -2.5400
  -47.5000   49.1000    9.0900   10.6500
  -90.5000  -13.4600  -25.6300   -0.8900
NewChrom = recdis(OldChrom)

NewChrom =

   40.2300   13.2600   13.3500   -9.0900
   40.2300   13.2600   13.3500   15.3800
  -47.5000   49.1000   15.2000   -2.5400
  -47.5000   49.1000    9.0900   10.6500
  -90.5000  -13.4600  -25.6300   -0.8900  
------------------------------------
recint	%中间重组，recdis只能应用于实值变量种群的函数，recdis为低级重组函数，通常被recombin调用
NewChrom = recint(OldChrom, XOVR)
OldChrom = [40.23 -17.17 28.95 15.38; 82.06 13.26 13.35 -9.09; 52.43 25.64 15.20 -2.54; -47.50 49.10 9.09 10.65; -90.50 -13.46 -25.63 -0.89]

NewChrom = recint(OldChrom)

NewChrom =

   80.8923  -18.9812   18.0528   11.2752
   89.8513  -17.5833   10.4523   -7.8768
  -58.3612   51.9167   15.8335    4.9826
  -67.2195   53.9302   12.2790   -3.0303
  -90.5000  -13.4600  -25.6300   -0.8900
-------------------------------------------
reclin	%线性重组，reclin完成当前种群OldChrom成对个体的线性重组，返回交配后的新种群NewChrom.OldChrom每一行对应一个个体，reclin只能应用于实值变量种群的函数
reclin为低级重组函数，通常被recombin调用
OldChrom = [40.23 -17.17 28.95 15.38; 82.06 13.26 13.35 -9.09; 52.43 25.64 15.20 -2.54]

OldChrom =

   40.2300  -17.1700   28.9500   15.3800
   82.0600   13.2600   13.3500   -9.0900
   52.4300   25.6400   15.2000   -2.5400
NewChrom = reclin(OldChrom)

NewChrom =

   56.2359   -5.5262   22.9808    6.0168
   87.2303   17.0212   11.4218  -12.1146
   52.4300   25.6400   15.2000   -2.5400   
------------------------------------------
recmut	%具有变异特征的线性重组
NewChrom = recmut(OldChrom, FieldDR, MutOpt)
recmut完成当前种群OldChrom成对个体的具有突变特征的线性重组，返回交配后的新种群NewChrom.recmut只能应用于实值变量种群的函数,recmut为低级重组函数，通常被recombin调用
OldChrom = [40.23 -17.17 28.95 15.38; 82.06 13.26 13.35 -9.09; 52.43 25.64 15.20 -2.54; -47.50 49.10 9.09 10.65; -90.50 -13.46 -25.63 -0.89]

OldChrom =

   40.2300  -17.1700   28.9500   15.3800
   82.0600   13.2600   13.3500   -9.0900
   52.4300   25.6400   15.2000   -2.5400
  -47.5000   49.1000    9.0900   10.6500
  -90.5000  -13.4600  -25.6300   -0.8900
FieldDR = [-100 -50 -30 -20; 100 50 30 20]

FieldDR =

  -100   -50   -30   -20
   100    50    30    20
NewChrom = recmut(OldChrom,FieldDR)

NewChrom =

   40.2300  -17.1700   28.9500   15.3800
   82.0600   13.2600   13.3500   -9.0900
 -100.0000  -23.2503    7.5601  -13.5351
  100.0000   50.0000   16.7299   20.0000
  -90.5000  -13.4600  -25.6300   -0.8900
------------------------------------------
recombin	%重组个体（高级函数）
NewChrom = recombin(REC_F, OldChrom, RecOpt, SUBPOP)

BaseV = [-100 -50 -30 -20; 100 50 30 20]

BaseV =

  -100   -50   -30   -20
   100    50    30    20
Chrom = crtrp(5, BaseV)

Chrom =

    9.4431  -24.5718  -18.2043   13.2331
  -72.2751   31.4285  -14.9350    3.4106
  -70.1412  -25.6475    6.9627    1.9889
  -48.4983   42.9264   -1.6027   16.6877
   68.1435  -15.0016   -8.9004   -8.5664   

NewChrom = recombin('recdis',Chrom)			%参数选取离散重组

NewChrom =

  -72.2751  -24.5718  -18.2043    3.4106
  -72.2751   31.4285  -18.2043   13.2331
  -48.4983   42.9264    6.9627   16.6877
  -70.1412  -25.6475    6.9627   16.6877
   68.1435  -15.0016   -8.9004   -8.5664

NewChrom = recombin('xovsp',Chrom)			%参数选取单点交叉

NewChrom =

    9.4431   31.4285  -14.9350    3.4106
  -72.2751  -24.5718  -18.2043   13.2331
  -70.1412  -25.6475   -1.6027   16.6877
  -48.4983   42.9264    6.9627    1.9889
   68.1435  -15.0016   -8.9004   -8.5664

%recombin检测输入参数的一致性并调用低级重组函数，如果recombin调用时具有多个子种群，则对每个子种群分别调用低级重组函数。
------------------------------------------------
reins	%一致随机和基于适应度的重插入
[Chrom, ObjVCh] = reins(Chrom, SelCh, SUBPOP, InsOpt, ObjVCh, ObjVSel)
%reins完成插入子代到当前种群，用子代代替父代并返回结果种群，子代包含在矩阵SelCh中，父代在矩阵Chrom中，Chrom和selCh中每一行对应一个个体
FieldDR = [-10 -5 -3 -1; 10 5 3 1]	%定义边界变量

FieldDR =

   -10    -5    -3    -1
    10     5     3     1
    
Chrom = crtrp(6,FieldDR)		%产生6个个体的父代种群

Chrom =

   -4.7406   -2.7102   -2.5309    0.6346
    3.0816    4.1334   -0.3439    0.7374
    3.7843   -3.4762   -2.3601   -0.8311
    4.9630    3.2582    2.7714   -0.2004
   -0.9892    0.3834   -2.9722   -0.4803
   -8.3236    4.9613    1.6495    0.6001

FieldDR1 = [-100 -50 -30 -20; 100 50 30 20]		%定义边界变量

FieldDR1 =

  -100   -50   -30   -20
   100    50    30    20
SelCh = crtrp(2,FieldDR1)			%产生2个个体的子代种群

SelCh =

  -13.7172  -31.8153  -21.2677   14.7717
   82.1295  -23.6197  -21.8359    3.1882

Chrom = reins(Chrom, SelCh)			%插入所有子代到种群中

Chrom =

   -4.7406   -2.7102   -2.5309    0.6346
  -13.7172  -31.8153  -21.2677   14.7717
    3.7843   -3.4762   -2.3601   -0.8311
    4.9630    3.2582    2.7714   -0.2004
   82.1295  -23.6197  -21.8359    3.1882
   -8.3236    4.9613    1.6495    0.6001

ObjVCh = [21; 22; 23; 24; 25; 26]		%为父种群考虑目标值ObjVCh向量

ObjVCh =

    21
    22
    23
    24
    25
    26
Chrom = reins(Chrom, SelCh, 1, 1, ObjVCh)

Chrom =

   -4.7406   -2.7102   -2.5309    0.6346
  -13.7172  -31.8153  -21.2677   14.7717
    3.7843   -3.4762   -2.3601   -0.8311
    4.9630    3.2582    2.7714   -0.2004
   82.1295  -23.6197  -21.8359    3.1882
  -13.7172  -31.8153  -21.2677   14.7717
------------------------------------------
rep	%矩阵的复制
MatOut = rep(MatIn,REPN)	%rep为低级复制函数，通常不直接使用，可被GA工具箱中许多函数调用
Matin = [1 2 3 4; 5 6 7 8]

Matin =

     1     2     3     4
     5     6     7     8
Matin = rep(Matin, [1,2])

Matin =

     1     2     3     4     1     2     3     4
     5     6     7     8     5     6     7     8
--------------------------------------------------
rws	%轮盘赌选择
NewChrIx = rws(FitnV, Nsel)	%rws在当前种群中按照他们的适应度FitnV选择Nsel个个体繁殖.rws是一低级选择函数，通常被select调用
FitnV = [1.50; 1.35; 1.21; 1.07; 0.92; 0.78; 0.64;0.5]

FitnV =

    1.5000
    1.3500
    1.2100
    1.0700
    0.9200
    0.7800
    0.6400
    0.5000

NewChrIx = rws(FitnV,6)

NewChrIx =

     3
     1
     2
     1
     1
     2
-----------------------------
scaling		%线性适应度计算
FitnV = scaling(ObjV, Smul)	%scaling转换一种群的目标值ObjV为由Smul的值决定上界的适应度值，FitnV = ObjV.*a + b，目标值ObjV为负时
ObjV = [1; 2; 3; 4; 5; 6]

ObjV =

     1
     2
     3
     4
     5
     6
fitnV = scaling(ObjV)

fitnV =

         0
    1.4000
    2.8000
    4.2000
    5.6000
    7.0000
---------------------
select  %从种群中选择个体（高级函数）
SelCh = select(SEL_F, Chrom, FitnV, GGAP, SUBPOP)	%利用函数select从种群Chrom中选择优良个体，并将选择的个体返回到新种群SelCh中，
Chrom和SelCh中每一行对应一个个体，SEL_F包含一低级的选择函数名，如rws或sus.FitnV为种群Chrom中个体的适应度值，表明每个个体被选择的预期概率
GGAP为可选参数，指出代沟，部分总群被复制。默认为GGAP为1，也可大于1允许子代多余父代数量.SUBPOP为可选参数，决定子种群的数量
Chrom = [1 11 21;2 12 22;3 13 23;4 14 24;5 15 25;6 16 26;7 17 27;8 18 28]

Chrom =

     1    11    21
     2    12    22
     3    13    23
     4    14    24
     5    15    25
     6    16    26
     7    17    27
     8    18    28
FitnV = [1.50;1.35;1.21;1.07;0.92;0.78;0.64;0.5]

FitnV =

    1.5000
    1.3500
    1.2100
    1.0700
    0.9200
    0.7800
    0.6400
    0.5000
SelCh = select('sus',Chrom,FitnV,2,2)

SelCh =

     1    11    21
     3    13    23
     4    14    24
     2    12    22
     2    12    22
     4    14    24
     1    11    21
     2    12    22
     6    16    26
     7    17    27
     5    15    25
     5    15    25
     6    16    26
     5    15    25
     7    17    27
     8    18    28
---------------------
sus %随机遍历抽样
NewChrIx = sus(FitnV, Nsel)	%sus按照个体在当前种群中的适应度FitnV为繁殖概率性选择Nsel个个体.sus是一低级函数，通常被select调用
FitnV = [1.50;1.35;1.21;1.07;0.92;0.78;0.64;0.5]

FitnV =

    1.5000
    1.3500
    1.2100
    1.0700
    0.9200
    0.7800
    0.6400
    0.5000
NewChrIx = sus(FitnV,6)

NewChrIx =

     6
     7
     1
     2
     3
     4
------------------
xovdp	%两点交叉
NewChrom = xovdp(OldChrom, XOVR)	%xovdp完成当前种群OldChrom中一对个体按交叉概率XOVR进行交叉，返回交配后的新种群NewChrom.XOVR是可选参数
表明交叉概率，xovdp为低级交叉函数，被函数recombin调用
-------------
xovdprs		%减少代理的两点交叉
NewChrom = xovdprs(OldChrom, XOVR) 	%xovdprs在当前种群OldChrom中一对个体间按交叉概率XOVR进行减少代理两点交叉，并返回交配后的新种群NewChrom
xovdprs为低级交叉函数，被函数recombin调用
OldChrom=crtbp(5,6)

OldChrom =

     1     1     1     1     0     0
     0     0     0     0     0     0
     1     0     1     1     1     0
     0     0     1     0     0     1
     1     1     0     0     1     0
NewChrom = xovdprs(OldChrom, 0.7)

NewChrom =

     1     1     0     1     0     0
     0     0     1     0     0     0
     1     0     1     0     1     0
     0     0     1     1     0     1
     1     1     0     0     1     0
-------------------------------------
xovmp		%多点交叉，xovmp为低级交叉函数，被调用
NewChrom =  xovmp(OldChrom, Px, Npt, Rs)
---------------------------------------
xovsh	%洗牌交叉，为低级交叉函数，被函数recombin调用
NewChrom = xovsh(OldChrom, XOVR)
OldChrom=crtbp(5,6)

OldChrom =

     0     0     1     1     1     0
     0     0     1     1     1     1
     0     0     1     0     0     1
     1     0     1     1     1     1
     0     1     1     1     0     1
NewChrom = xovsh(OldChrom, 0.7)

NewChrom =

     0     0     1     1     1     0
     0     0     1     1     1     1
     1     0     1     0     1     1
     0     0     1     1     0     1
     0     1     1     1     0     1
--------------------------------------
xovshrs		%减少代理的洗牌交叉，为低级交叉函数，被函数recombin调用
NewChrom = xovshrs(OldChrom, XOVR)
OldChrom=crtbp(5,6)

OldChrom =

     1     0     0     1     1     1
     0     0     1     1     0     0
     0     0     1     1     0     0
     1     1     1     1     0     0
     0     1     0     1     0     0     
NewChrom = xovshrs(OldChrom, 0.7)

NewChrom =

     0     0     0     1     1     1
     1     0     1     1     0     0
     1     1     1     1     0     0
     0     0     1     1     0     0
     0     1     0     1     0     0
------------------------------------
xovsp		%单点交叉，为低级交叉函数，被函数recombin调用
NewChrom = xovsp(OldChrom, XOVR)
OldChrom=crtbp(5,6)

OldChrom =

     0     0     0     1     1     0
     0     0     0     1     1     0
     0     0     0     1     1     1
     1     0     0     0     0     0
     0     1     0     0     1     0
NewChrom = xovsp(OldChrom, 0.7)

NewChrom =

     0     0     0     1     1     0
     0     0     0     1     1     0
     0     0     0     1     0     0
     1     0     0     0     1     1
     0     1     0     0     1     0     
-------------------------------------
xovsprs		%减少代理的单点交叉，，为低级函数，通常被函数recombin调用
NewChrom = xovsprs(OldChrom, XOVR)
OldChrom=crtbp(5,6)

OldChrom =

     1     1     0     0     1     1
     1     1     1     0     0     0
     1     1     1     1     1     0
     1     0     1     0     0     0
     0     0     0     0     0     1
NewChrom = xovsprs(OldChrom, 0.7)

NewChrom =

     1     1     0     0     0     0
     1     1     1     0     1     1
     1     1     1     0     0     0
     1     0     1     1     1     0
     0     0     0     0     0     1
--------------------------------------
1.种群的表示与初始化
2.目标函数与适应度函数（目标函数必须由用户创建，以obj为前缀名，线性尺度变换函数scaling不适用于目标函数产生负的适应度值的情况）
3.选择
4.交叉（产生新染色体的基本操作称为染色体的交叉，也称基因重组.多点交叉的破坏性可促进解空间的搜索而不至于在搜索中因高适应度个体过早收敛，使搜索健壮）
交叉能保证每次留下优良的基因，但仅仅对原有结果进行选择，基因还是那么几个，只不过交换其组合顺序，这只能保证N次优化后计算结果更接近于局部解，永远无法
达到全局最优解，为此引入变异
5.变异（采用一任意小的概率0.001~0.1，改变染色体元素.其作用：搜索任意给定串的可能性永不为零，为保证通过选择和交叉操作恢复可能丢失的好的遗传物质提供安全网络）
	实值编码在高变异率中比二进制编码好，提高了对搜索空间的搜索能力，而不会对收敛特性产生不利影响。交叉产生一条新的染色体后，需要在新染色体上随机
	选择若干个基因，并随机修改基因值，给现有染色体引入新基因，突破当前搜索的限制利于算法找到全局最优解.
遗传算法是随机搜索算法，设定明确的收敛性判别标准困难，在搜寻最优个体之前的许多代种群适应度可能保持不变，程序的终止搜寻成为问题，通常方法采用预先设定代
数来终止遗传算法或根据问题定义测试种群中最优个体的性能.
----------------
由于使用了代沟，子代的数量比当前种群数量要小,
收敛数度与找到全局最优解时相关的，收敛速度快，易收敛到局部最优解.增加收敛数度的方法有：1.最优保存法，把每一代的最优个体保存下来，直接放入下一代中。
2.考虑种群的数量，数量太少，会使得进化缓慢，因为每次找到好的个体概率很小，种群数太大计算耗时，可根据搜索空间大小和需要时间来调整种群数量
3.使用二进制编码时，如果当前是16最优值为15的话，在十进制中两个数很接近，可是在二进制中需要把所有位都翻转，才可从16变为15，这使得离最优解很近时，变异
操作反而收益不大，可以考虑实数编码和格雷码来解决.将问题的可能解编码为二进制位串,问题的可能解为实数对时,首先必须将和分别使用二进制位串表示，然后将
二进制位串组合在一起,对于每一个变量的！！！二进制位串的长度取决于变量的定义域所要求的精度！！！
4.变异0.1优点大，变异太大，使得每次获得的个体的参考意义变小，最后如同随机搜索一样，概率很低
5.对于需求的问题，需要多高的精度确定最优值，选择合适的精度，来保证搜索空间大小合理
6.考虑计算的优化，将计算尽可能的向量化，matlab中大量计算的向量化比for循环快几个数量级
7.很难优化，可以考虑多线程
所谓的智能优化算法与经典算法还有区别的，这些算法都很简单，无需任何算法基础就可掌握，为工程应用而设计的，保证不了最优解，解的好坏需要看运气，而且无法对
解进行证明，简言之，此类算法是看谁猜的又快又好。
----------------------------------------------
遗传算法提前收敛的问题,导致早熟的原因有：
1.群体规模,当群体规模太小时造成有效等位基因先天缺失，无法保证有效模式的正确传播，使得群体进化不能按模式定理产生所预测的期望数量
2.群体初始化,初始群体分布在编码空间的局部区域，模式采样误差较大，导致GA的搜索范围受到限制
3.选择压力(最佳个体与最差个体被选择的概率之比)太大,导致当前种群中最优个体具有较高的复制数目，较差个体消亡数度过快，导致群体多样性迅速降低
4.变异概率,当变异概率较小时，群体多样性下降数度较快，易导致有效基因的迅速丢失且难以恢复，当变异概率较大时，群体多样性被保持在较高水平，但
高阶模式被破坏的概率随之增大
5.适应函数自身性质,当适应函数高度非线性，染色体基因位高度相关时，有效模式被破坏的可能性加大
--------------------------------------------------------------------------------------
**********************gatbx工具箱实例********************
--------------------
fun_obj.m 文件,内容为
%目标函数文件
function y = fun_obj(x)
y = x.*sin(10*pi*x)+2.0;
end
% x取值区间[-1,2]
-----------------
GA.m 文件
%filename:Genetic Algorithm
%确定遗传算法参数
opt_maxmin = 1;          %目标优化类型：（1 最大化 ）（-1 最小化） 
NIND = 40;               %个体数目
MAXGEN = 25;             %最大遗传代数
PRECI = 20;              %变量的二进制位数
GGAP = 0.9;              %代沟
lb = -1;                 %变量取值下限
ub = 2;                  %变量取值上限
code_gray_binary = 1;    %是否选择编码方式：（1 格雷）（0 二进制）
scale_logarithmic_arithmetic = 0;   %指明每个字串的刻度：（1 对数刻度）（0 算术刻度）
trace = zeros(MAXGEN,2);            %遗传迭代性能跟踪器
FieldD = [PRECI; lb; ub; code_gray_binary; scale_logarithmic_arithmetic; 1; 1]; %区域描述器
Chrom = crtbp(NIND, PRECI);         %初始化生成种群
gen = 0;                            %代计数器
x = bs2rv(Chrom, FieldD);           %翻译初始种群为十进制
fun_Objective = fun_obj(x);         %计算目标函数值
tx = lb: 0.01: ub;                  %横坐标
plot(tx, fun_obj(tx));              %函数
grid on;                            %给当前图形标记添加网格
xlabel('x');
ylabel('y');
title('一元函数优化结果');
hold on;
while gen < MAXGEN
    FitnV = ranking(-opt_maxmin * fun_Objective);    %计算目标函数适应度(基于秩的适应度计算)
    SelCh = select('sus', Chrom, FitnV, GGAP);       %使用随机遍历方式选择
    SelCh = recombin('xovsp', SelCh, 0.7);           %交叉(单点交叉)
    SelCh = mut(SelCh);                              %变异（离散变异）
    x = bs2rv(SelCh, FieldD);                        %子代个体的十进制翻译转换
    fun_Objective_sel = fun_obj(x);                  %计算子代个体对应的目标函数值
    [Chrom, fun_Objective] = reins(Chrom, SelCh, 1, 1, opt_maxmin * fun_Objective, opt_maxmin * fun_Objective_sel);   %根据目标函数值将子代个体插入新群种
    %输出最优解及其序号，并在目标函数图像中标出，Y为最优解，I为种群的序号
    [Y, I] = max(fun_Objective);                     %寻找当前种群最优解
    x = bs2rv(Chrom,FieldD);                         %二进制串到十进的制转换
    Y = Y * opt_maxmin;
    opt_maxmin = opt_maxmin * opt_maxmin;
    gen = gen + 1;                                   %代计数器增加
    trace(gen,1) = Y;                                %矩阵的秩，即对角元素之和
    trace(gen,2) = mean(fun_Objective);    
end
plot(x(I), Y, 'r*'), figure, plot(trace(:,1), 'r-*'), hold on;  %
plot(trace(:,2), 'b-o'), legend('各子代种群最优解', '各子代种群均值的变化'),...
    xlabel('迭代次数'), ylabel('目标函数优化情况'), title('一元函数优化过程');
------------------------------------------------------------------------------
对于二进制编码则是随机初始化组这样的初始解，每组初始解随机初始化位的编码。而对于实数编码方式，则是在区间上随机初始化组初始解。
适应度函数的目的是评价个体的好坏，如上面的优化问题中，即为最终的优化目标函数。对于二进制编码，则需要先将二进制编码转换成实数编码，
再进行适应值函数的计算，对于实数编码方式，则直接进行适应值函数的计算。
遗传操作主要包括：选择(selection)、交叉(crossover)、变异(mutation)，遗传操作的主要目的是从当前的群体中产生新的群体，这样
便能使得产生新的更优的个体。	
!!!在实现遗传算法时，一个常用的方法是将到当前代为止演化的最好个体单独存放起来，在遗传算法结束后，将演化过程中发现的最好个体作为问题的
最优解或近似最优解!!!
--------------------------------------------------------------
% OBJHARV.M      (OBJective function for HARVest problem)
%
% This function implements the HARVEST PROBLEM.
%
% Syntax:  ObjVal = objharv(Chrom,rtn_type)
%
% Input parameters:
%    Chrom     - Matrix containing the chromosomes of the current
%                population. Each row corresponds to one individual's
%                string representation.
%                if Chrom == [], then special values will be returned
%    rtn_type  - if Chrom == [] and
%                rtn_type == 1 (or []) return boundaries
%                rtn_type == 2 return title
%                rtn_type == 3 return value of global minimum
%
% Output parameters:
%    ObjVal    - Column vector containing the objective values of the
%                individuals in the current population.
%                if called with Chrom == [], then ObjVal contains
%                rtn_type == 1, matrix with the boundaries of the function
%                rtn_type == 2, text for the title of the graphic output
%                rtn_type == 3, value of global minimum
%                
%
% Author:     Hartmut Pohlheim
% History:    18.02.94     file created (copy of vallinq.m)
%             01.03.94     name changed in obj*
%             14.01.03     updated for MATLAB v6 by Alex Shenfield

function ObjVal = objharv(Chrom,rtn_type);

% global gen;

% Dimension of objective function
   Dim = 20;

% values from MICHALEWICZ
   a = 1.1;
   x0 = 100;
   xend = x0;
   XENDWEIGHT = 0.4/(Dim^0.6);
   
% Compute population parameters
   [Nind,Nvar] = size(Chrom);            %---------------返回初始种群的维度Nind*Nvar

% Check size of Chrom and do the appropriate thing
   % if Chrom is [], then define size of boundary-matrix and values
   if Nind == 0                          %-----------！！！----------------
      % return text of title for graphic output
      if rtn_type == 2
         ObjVal = ['HARVEST PROBLEM-' int2str(Dim)];
      % return value of global minimum
      elseif rtn_type == 3               %！！！初始种群为空时（Nind == 0)，返回矩阵FieldDR包含下界和上界的实数值的区间
         ObjVal = -sqrt(x0*(a^Dim-1)^2/(a^(Dim-1)*(a-1)));
      % define size of boundary-matrix and values
      else   
         % lower and upper bound, identical for all n variables        
         ObjVal1 = [0; 10*Dim];
         ObjVal = rep(ObjVal1,[1 Dim]);
      end                                  %---------------！！！------------
   % if Dim variables, compute values of function
   elseif Nvar == Dim                    %--------------
      ObjVal = zeros(Nind,1);
      X = rep(x0,[Nind 1]);
      for irun = 1:Nvar,
         X = a*X - Chrom(:,irun);
      end
      X;
      ObjVal = -(sum(sqrt(Chrom)')' - XENDWEIGHT * abs(X-x0));
   % otherwise error, wrong format of Chrom
   else
      error('size of matrix Chrom is not correct for function evaluation');
   end   


% End of function
-------------------------
！！！基于人工智能的建筑设计方法，是以建筑设计过程为对象，以人工智能为创新驱动，以各种虚拟技术为界面的，讨论人类设计师如何与具有一定智能的机器系统，
通过实时交互来进行设计,以期同时发挥人类的创造与处理非确定问题的能力、机器的精确感知与高速计算能力.首先,传统的建筑设计方法是基于建筑师为唯一主体的
一元论体系.其次，最新的人工智能领域,以基于深度神经网络技术的突破为亮点，能够超出人类感知能力的正确率，完成图像、语音等的识别与解析，并通过增强学习
算法已经实现了在各种博弈问题上对人类的反超.这些都为使机器具有一定程度的智能提供了可能.！！！最后虚拟技术在硬件上的轻量化、普及化使得其应用场景呈现
爆炸性增长，相比传统屏幕的二维图形用户界面,其带有沉浸感的真三维环境大大提高了信息交互的效率.同时，随着各种实时扫描与投射技术的发展，可触用户界面也
逐渐开始普及，彻底摆脱了无论使屏幕还是虚拟环境的这种感知代理模式，直接使得建筑物可以在实物上进行各种带有计算机信息的操作，从而实现人与机的直接互动.

多学科的深度交叉研究得以实现新的研究方向.

传统建筑行业的建筑与结构设计大多仍针对单个项目进行人工设计，需要设计人员进行大量的重复性工作，各工作之间协同效率低下；基于节省材料的原因，构件与配件
的尺寸各异，施工工业化、智能化、施工过程管理等难度加大且效率不高.智能建造的基本技术特征是规划设计的智能化、加工制作自动化、现场施工智能装配化、运维管
理信息化、拆除废件资源化；从而确保建造质量、建造效率、减少劳动力需求，同时实现建筑的全寿命周期维护.结构设计体系化、结构构件及配套部品的模数化和标准化
是实现建筑设计智能化的基础和效率保证.另外,高效的结构体系和连接节点技术是实现智能设计的关键技术之一,相关技术发展水平是衡量一个国家智能建造产业水平的重
要指标.

从自然的表现形式中受到启发，开发出一些科学技术,如从自然智能(指自然界包括生命个体、生物群、生态系统、物理化学、社会经济等中蕴含的天然信息处理机制与系统
)受到启发从中抽取计算模式的自然计算,并应用与各个领域而提出的科学理论方法与技术

DNA为承载遗传信息的载体，科学家从其遗传的优化机制中受到启发研制出遗传算法.

模拟自然计算模式成为人工智能研究的重要方法和手段,自让计算也成为人工智能最重要的数学基础之一, 人工智能需要具有坚实数学基础自然计算，后者集信息论、概率论
优化计算等数学主题为背景的计算理论与方法

遗传算法(Genetic Algorithm)
1975年，美国Michigan大学J.Holland提出遗传算法.
(1)自然界的进化准则：适者生存、优胜略汰
(2）生物遗传学原理：基因复制、交叉、变异


























定义变量
函数表达式的定义
函数的约束条件：
（比如等式约束，含等式约束的目标优化问题是常见的比较难用遗传算法求解的一类问题。若用等式约束，遗传算法在进化过程中会出现大量的非可行解。甚至连续十几代
全部个体都为非可行解，一个可行解没有，所以就不会收敛）经典的处理方法有：1.直接采取罚函数的处理约束等式约束。2.将等式约束化成一个新的目标，用多目标优化
算法处理等式约束的问题，该法可极大的扩宽所研究问题的可行解区域，从而使得遗传算法方便的进行最优解的搜索；存在的弊端就是该法对可行解的扩宽程度较大，使用
多目标优化算法求解，得到的结果是帕累托最优解集。问题易出在搜索时接的分布性不好儿而导致搜索到的帕累托前沿种并不包含使得上述新增目标到达绝对最优的解，从
而导致所有帕累托最优解均不满足该等式约束，因此方法2也会导致算法的不稳定。3.采用数学方法降维消除等式约束，该法利用数学推导与等式约束，将其中一个或
多个变量用其余变量线性表出或非线型表出，从而使模型降维，同时也成功消除等式约束，该法在效果上是最好的，其局限性是：对于复杂的等式约束，无法将其中一个
或多个变量用其余变量线性表出或非线型表出时，该法无法使用。应优先使用方法3再考虑1和2
函数的变量范围



































